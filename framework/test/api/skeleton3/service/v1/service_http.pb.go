// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type Skeleton3ServiceHTTPServer interface {
	Get(context.Context, *GetRequest) (*GetReply, error)
}

func RegisterSkeleton3ServiceHTTPServer(s *http.Server, srv Skeleton3ServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/Skeleton3/Service/v1/Get", _Skeleton3Service_Get0_HTTP_Handler(srv))
}

func _Skeleton3Service_Get0_HTTP_Handler(srv Skeleton3ServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.skeleton3.service.v1.Skeleton3Service/Get")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReply)
		return ctx.Result(200, reply)
	}
}

type Skeleton3ServiceHTTPClient interface {
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *GetReply, err error)
}

type Skeleton3ServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewSkeleton3ServiceHTTPClient(client *http.Client) Skeleton3ServiceHTTPClient {
	return &Skeleton3ServiceHTTPClientImpl{client}
}

func (c *Skeleton3ServiceHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*GetReply, error) {
	var out GetReply
	pattern := "/Skeleton3/Service/v1/Get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.skeleton3.service.v1.Skeleton3Service/Get"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
