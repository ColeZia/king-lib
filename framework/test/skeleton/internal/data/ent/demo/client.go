// Code generated by entc, DO NOT EDIT.

package demo

import (
	"context"
	"fmt"
	"log"

	"gl.king.im/king-lib/framework/test/skeleton/internal/data/ent/demo/migrate"

	"gl.king.im/king-lib/framework/test/skeleton/internal/data/ent/demo/sometable"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// SomeTable is the client for interacting with the SomeTable builders.
	SomeTable *SomeTableClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.SomeTable = NewSomeTableClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("demo: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("demo: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:       ctx,
		config:    cfg,
		SomeTable: NewSomeTableClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:    cfg,
		SomeTable: NewSomeTableClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		SomeTable.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.SomeTable.Use(hooks...)
}

// SomeTableClient is a client for the SomeTable schema.
type SomeTableClient struct {
	config
}

// NewSomeTableClient returns a client for the SomeTable from the given config.
func NewSomeTableClient(c config) *SomeTableClient {
	return &SomeTableClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sometable.Hooks(f(g(h())))`.
func (c *SomeTableClient) Use(hooks ...Hook) {
	c.hooks.SomeTable = append(c.hooks.SomeTable, hooks...)
}

// Create returns a create builder for SomeTable.
func (c *SomeTableClient) Create() *SomeTableCreate {
	mutation := newSomeTableMutation(c.config, OpCreate)
	return &SomeTableCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SomeTable entities.
func (c *SomeTableClient) CreateBulk(builders ...*SomeTableCreate) *SomeTableCreateBulk {
	return &SomeTableCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SomeTable.
func (c *SomeTableClient) Update() *SomeTableUpdate {
	mutation := newSomeTableMutation(c.config, OpUpdate)
	return &SomeTableUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SomeTableClient) UpdateOne(st *SomeTable) *SomeTableUpdateOne {
	mutation := newSomeTableMutation(c.config, OpUpdateOne, withSomeTable(st))
	return &SomeTableUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SomeTableClient) UpdateOneID(id uint64) *SomeTableUpdateOne {
	mutation := newSomeTableMutation(c.config, OpUpdateOne, withSomeTableID(id))
	return &SomeTableUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SomeTable.
func (c *SomeTableClient) Delete() *SomeTableDelete {
	mutation := newSomeTableMutation(c.config, OpDelete)
	return &SomeTableDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SomeTableClient) DeleteOne(st *SomeTable) *SomeTableDeleteOne {
	return c.DeleteOneID(st.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SomeTableClient) DeleteOneID(id uint64) *SomeTableDeleteOne {
	builder := c.Delete().Where(sometable.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SomeTableDeleteOne{builder}
}

// Query returns a query builder for SomeTable.
func (c *SomeTableClient) Query() *SomeTableQuery {
	return &SomeTableQuery{
		config: c.config,
	}
}

// Get returns a SomeTable entity by its id.
func (c *SomeTableClient) Get(ctx context.Context, id uint64) (*SomeTable, error) {
	return c.Query().Where(sometable.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SomeTableClient) GetX(ctx context.Context, id uint64) *SomeTable {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SomeTableClient) Hooks() []Hook {
	return c.hooks.SomeTable
}
