// Code generated by entc, DO NOT EDIT.

package demo

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"gl.king.im/king-lib/framework/test/skeleton2/internal/data/ent/demo/predicate"
	"gl.king.im/king-lib/framework/test/skeleton2/internal/data/ent/demo/sometable"
)

// SomeTableUpdate is the builder for updating SomeTable entities.
type SomeTableUpdate struct {
	config
	hooks    []Hook
	mutation *SomeTableMutation
}

// Where appends a list predicates to the SomeTableUpdate builder.
func (stu *SomeTableUpdate) Where(ps ...predicate.SomeTable) *SomeTableUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetName sets the "name" field.
func (stu *SomeTableUpdate) SetName(s string) *SomeTableUpdate {
	stu.mutation.SetName(s)
	return stu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (stu *SomeTableUpdate) SetNillableName(s *string) *SomeTableUpdate {
	if s != nil {
		stu.SetName(*s)
	}
	return stu
}

// SetCreatedAt sets the "created_at" field.
func (stu *SomeTableUpdate) SetCreatedAt(u uint64) *SomeTableUpdate {
	stu.mutation.ResetCreatedAt()
	stu.mutation.SetCreatedAt(u)
	return stu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stu *SomeTableUpdate) SetNillableCreatedAt(u *uint64) *SomeTableUpdate {
	if u != nil {
		stu.SetCreatedAt(*u)
	}
	return stu
}

// AddCreatedAt adds u to the "created_at" field.
func (stu *SomeTableUpdate) AddCreatedAt(u uint64) *SomeTableUpdate {
	stu.mutation.AddCreatedAt(u)
	return stu
}

// SetUpdatedAt sets the "updated_at" field.
func (stu *SomeTableUpdate) SetUpdatedAt(u uint64) *SomeTableUpdate {
	stu.mutation.ResetUpdatedAt()
	stu.mutation.SetUpdatedAt(u)
	return stu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stu *SomeTableUpdate) SetNillableUpdatedAt(u *uint64) *SomeTableUpdate {
	if u != nil {
		stu.SetUpdatedAt(*u)
	}
	return stu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (stu *SomeTableUpdate) AddUpdatedAt(u uint64) *SomeTableUpdate {
	stu.mutation.AddUpdatedAt(u)
	return stu
}

// SetDeletedAt sets the "deleted_at" field.
func (stu *SomeTableUpdate) SetDeletedAt(u uint64) *SomeTableUpdate {
	stu.mutation.ResetDeletedAt()
	stu.mutation.SetDeletedAt(u)
	return stu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stu *SomeTableUpdate) SetNillableDeletedAt(u *uint64) *SomeTableUpdate {
	if u != nil {
		stu.SetDeletedAt(*u)
	}
	return stu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (stu *SomeTableUpdate) AddDeletedAt(u uint64) *SomeTableUpdate {
	stu.mutation.AddDeletedAt(u)
	return stu
}

// Mutation returns the SomeTableMutation object of the builder.
func (stu *SomeTableUpdate) Mutation() *SomeTableMutation {
	return stu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *SomeTableUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SomeTableMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("demo: uninitialized hook (forgotten import demo/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *SomeTableUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *SomeTableUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *SomeTableUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *SomeTableUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sometable.Table,
			Columns: sometable.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sometable.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sometable.FieldName,
		})
	}
	if value, ok := stu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldCreatedAt,
		})
	}
	if value, ok := stu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldCreatedAt,
		})
	}
	if value, ok := stu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldUpdatedAt,
		})
	}
	if value, ok := stu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldDeletedAt,
		})
	}
	if value, ok := stu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sometable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SomeTableUpdateOne is the builder for updating a single SomeTable entity.
type SomeTableUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SomeTableMutation
}

// SetName sets the "name" field.
func (stuo *SomeTableUpdateOne) SetName(s string) *SomeTableUpdateOne {
	stuo.mutation.SetName(s)
	return stuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (stuo *SomeTableUpdateOne) SetNillableName(s *string) *SomeTableUpdateOne {
	if s != nil {
		stuo.SetName(*s)
	}
	return stuo
}

// SetCreatedAt sets the "created_at" field.
func (stuo *SomeTableUpdateOne) SetCreatedAt(u uint64) *SomeTableUpdateOne {
	stuo.mutation.ResetCreatedAt()
	stuo.mutation.SetCreatedAt(u)
	return stuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (stuo *SomeTableUpdateOne) SetNillableCreatedAt(u *uint64) *SomeTableUpdateOne {
	if u != nil {
		stuo.SetCreatedAt(*u)
	}
	return stuo
}

// AddCreatedAt adds u to the "created_at" field.
func (stuo *SomeTableUpdateOne) AddCreatedAt(u uint64) *SomeTableUpdateOne {
	stuo.mutation.AddCreatedAt(u)
	return stuo
}

// SetUpdatedAt sets the "updated_at" field.
func (stuo *SomeTableUpdateOne) SetUpdatedAt(u uint64) *SomeTableUpdateOne {
	stuo.mutation.ResetUpdatedAt()
	stuo.mutation.SetUpdatedAt(u)
	return stuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (stuo *SomeTableUpdateOne) SetNillableUpdatedAt(u *uint64) *SomeTableUpdateOne {
	if u != nil {
		stuo.SetUpdatedAt(*u)
	}
	return stuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (stuo *SomeTableUpdateOne) AddUpdatedAt(u uint64) *SomeTableUpdateOne {
	stuo.mutation.AddUpdatedAt(u)
	return stuo
}

// SetDeletedAt sets the "deleted_at" field.
func (stuo *SomeTableUpdateOne) SetDeletedAt(u uint64) *SomeTableUpdateOne {
	stuo.mutation.ResetDeletedAt()
	stuo.mutation.SetDeletedAt(u)
	return stuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (stuo *SomeTableUpdateOne) SetNillableDeletedAt(u *uint64) *SomeTableUpdateOne {
	if u != nil {
		stuo.SetDeletedAt(*u)
	}
	return stuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (stuo *SomeTableUpdateOne) AddDeletedAt(u uint64) *SomeTableUpdateOne {
	stuo.mutation.AddDeletedAt(u)
	return stuo
}

// Mutation returns the SomeTableMutation object of the builder.
func (stuo *SomeTableUpdateOne) Mutation() *SomeTableMutation {
	return stuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *SomeTableUpdateOne) Select(field string, fields ...string) *SomeTableUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated SomeTable entity.
func (stuo *SomeTableUpdateOne) Save(ctx context.Context) (*SomeTable, error) {
	var (
		err  error
		node *SomeTable
	)
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SomeTableMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("demo: uninitialized hook (forgotten import demo/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *SomeTableUpdateOne) SaveX(ctx context.Context) *SomeTable {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *SomeTableUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *SomeTableUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *SomeTableUpdateOne) sqlSave(ctx context.Context) (_node *SomeTable, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sometable.Table,
			Columns: sometable.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: sometable.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SomeTable.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sometable.FieldID)
		for _, f := range fields {
			if !sometable.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("demo: invalid field %q for query", f)}
			}
			if f != sometable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sometable.FieldName,
		})
	}
	if value, ok := stuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldCreatedAt,
		})
	}
	if value, ok := stuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldCreatedAt,
		})
	}
	if value, ok := stuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldUpdatedAt,
		})
	}
	if value, ok := stuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldDeletedAt,
		})
	}
	if value, ok := stuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: sometable.FieldDeletedAt,
		})
	}
	_node = &SomeTable{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sometable.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
